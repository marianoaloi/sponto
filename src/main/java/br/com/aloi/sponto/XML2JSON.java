package br.com.aloi.sponto;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.json.JSONObject;
import org.json.XML;
import org.wiztools.xsdgen.XsdGen;

/**
 *
 * @author maloi
 */
public class XML2JSON extends javax.swing.JFrame {

    /**
     * Creates new form SPoint
     */
    public XML2JSON() {
        initComponents();

        initMineListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jSplitPane = new javax.swing.JSplitPane();
        sJson = new javax.swing.JScrollPane();
        jsonText = new javax.swing.JTextPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        sXml = new javax.swing.JScrollPane();
        xmlText = new javax.swing.JTextPane();
        sXsd = new javax.swing.JScrollPane();
        xsdText = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        buttons = new javax.swing.JPanel();
        colar = new javax.swing.JButton();
        copiar = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLError = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMISair = new javax.swing.JMenuItem();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conversor entre XML e JSON");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("Sponto"); // NOI18N

        jSplitPane.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jSplitPaneAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jSplitPane.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPaneAncestorResized(evt);
            }
        });

        sJson.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Json"));
        sJson.setViewportView(jsonText);

        jSplitPane.setLeftComponent(sJson);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jSplitPane1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jSplitPane1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPane1AncestorResized(evt);
            }
        });

        sXml.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Xml"));
        sXml.setViewportView(xmlText);

        jSplitPane1.setLeftComponent(sXml);

        xsdText.setEditable(false);
        xsdText.setBorder(javax.swing.BorderFactory.createTitledBorder("XSD"));
        sXsd.setViewportView(xsdText);

        jSplitPane1.setRightComponent(sXsd);

        jSplitPane.setRightComponent(jSplitPane1);

        getContentPane().add(jSplitPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        buttons.setLayout(new java.awt.GridLayout(1, 2));

        colar.setText("colar");
        colar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colarActionPerformed(evt);
            }
        });
        buttons.add(colar);

        copiar.setText("copiar");
        copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiarActionPerformed(evt);
            }
        });
        buttons.add(copiar);

        jPanel2.add(buttons, java.awt.BorderLayout.CENTER);

        jCheckBox1.setText("Write XML");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBox1, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);
        jPanel1.add(jLError, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jMenu1.setText("File");

        jMISair.setText("Sair");
        jMISair.setToolTipText("Sair da aplicação");
        jMISair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISairActionPerformed(evt);
            }
        });
        jMenu1.add(jMISair);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void colarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colarActionPerformed
        UtilSPonto.colarParaAreaTransferencia(jsonText);
    }//GEN-LAST:event_colarActionPerformed

    private void copiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarActionPerformed
        UtilSPonto.copiarParaAreaTransferencia(xmlText);
    }//GEN-LAST:event_copiarActionPerformed

    private void jSplitPane1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jSplitPane1AncestorAdded
        jSplitPane1.setDividerLocation(getSize().height / 2);
    }//GEN-LAST:event_jSplitPane1AncestorAdded

    private void jSplitPane1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPane1AncestorResized
        jSplitPane1.setDividerLocation(getSize().height / 2);
    }//GEN-LAST:event_jSplitPane1AncestorResized

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        jsonText.setEditable(!jCheckBox1.isSelected());
            xmlText.setEditable(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jMISairActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMISairActionPerformed
        System.exit(0); // TODO add your handling code here:
    }// GEN-LAST:event_jMISairActionPerformed

    private void jSplitPaneAncestorAdded(javax.swing.event.AncestorEvent evt) {// GEN-FIRST:event_jSplitPaneAncestorAdded
        jSplitPane.setDividerLocation(getSize().width / 2);
    }// GEN-LAST:event_jSplitPaneAncestorAdded

    private void jSplitPaneAncestorResized(java.awt.event.HierarchyEvent evt) {// GEN-FIRST:event_jSplitPaneAncestorResized
        jSplitPane.setDividerLocation(getSize().width / 2);
    }// GEN-LAST:event_jSplitPaneAncestorResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
        /*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException
                | IllegalAccessException
                | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XML2JSON.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new XML2JSON().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttons;
    private javax.swing.JButton colar;
    private javax.swing.JButton copiar;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLError;
    private javax.swing.JMenuItem jMISair;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jsonText;
    private javax.swing.JScrollPane sJson;
    private javax.swing.JScrollPane sXml;
    private javax.swing.JScrollPane sXsd;
    private javax.swing.JTextPane xmlText;
    private javax.swing.JTextPane xsdText;
    // End of variables declaration//GEN-END:variables

    class ListenerChanges implements DocumentListener, ChangeListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            modifi();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            modifi();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            modifi();
        }

        @Override
        public void stateChanged(ChangeEvent e) {
            modifi();

        }

        private void modifi() {
            jLError.setText("");
            jCheckBox1ActionPerformed(null);
            try {
                if (!jCheckBox1.isSelected()) {
                    Transformer transformer = TransformerFactory.newInstance().newTransformer();
                    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                    Source src = new StreamSource(new StringReader(XML.toString(new JSONObject(jsonText.getText()))));
                    StreamResult rst = new StreamResult(new StringWriter());
                    transformer.transform(src,rst);
                    xmlText.setText(rst.getWriter().toString());

                } else {
                    jsonText.setText(XML.toJSONObject(xmlText.getText()).toString(2));
                }
                resetScroll(sXml);
                resetScroll(sXsd);
                resetScroll(sJson);
                
                XsdGen gen = new XsdGen();
                
                //gen.parse(new ByteArrayInputStream(xmlText.getText().getBytes(StandardCharsets.UTF_8)));
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                gen.write(os);
                xsdText.setText(os.toString("UTF-8"));
            } catch (Exception ex) {
                //Logger.getLogger(XML2JSON.class.getName()).log(Level.SEVERE, null, ex);
                jLError.setText(ex.getMessage());
            }

        }

        private void resetScroll(JScrollPane scrolled) {
           scrolled.getVerticalScrollBar().setValue(scrolled.getVerticalScrollBar().getMinimum());
           scrolled.getHorizontalScrollBar().setValue(scrolled.getHorizontalScrollBar().getMinimum());
        }

    }

    private void initMineListeners() {
        jsonText.getDocument().addDocumentListener(new ListenerChanges());
        xmlText.getDocument().addDocumentListener(new ListenerChanges());

    }

    public enum Convertions {
        JSON2XML,
        XML2JSON

    }

}
