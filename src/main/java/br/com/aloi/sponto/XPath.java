/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.aloi.sponto;

import com.github.fge.largetext.LargeText;
import com.github.fge.largetext.LargeTextFactory;
import com.github.fge.largetext.SizeUnit;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTextPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author maloi
 */
public class XPath extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 7975045097186485692L;

    public static void main(String[] args) {
        new XPath().setVisible(true);
    }

    /**
     * Creates new form TuQueSabe
     */
    public XPath() {
        initComponents();

        initMineListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        resultReplace = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane = new javax.swing.JSplitPane();
        sOriginal = new javax.swing.JScrollPane();
        original = new javax.swing.JTextPane();
        sModifed = new javax.swing.JScrollPane();
        modifed = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        OnlyFind = new javax.swing.JCheckBox();
        FindBreak = new javax.swing.JCheckBox();
        ReplaceFind = new javax.swing.JCheckBox();
        exceptionE = new javax.swing.JLabel();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jTextField1.setEditable(false);
        jPanel5.add(jTextField1, java.awt.BorderLayout.CENTER);

        jButton1.setText("Open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel5);

        resultReplace.setText("n0");
        resultReplace.setToolTipText("Only used in replace of text");
        jPanel1.add(resultReplace);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jSplitPane.setDividerLocation(400);

        sOriginal.setViewportView(original);

        jSplitPane.setLeftComponent(sOriginal);

        sModifed.setViewportView(modifed);

        jSplitPane.setRightComponent(sModifed);

        jPanel2.add(jSplitPane);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        OnlyFind.setText("Only Find");
        OnlyFind.setToolTipText("");
        jPanel3.add(OnlyFind);

        FindBreak.setText("Break Line");
        jPanel3.add(FindBreak);

        ReplaceFind.setText("Replace what Find");
        jPanel3.add(ReplaceFind);

        jPanel4.add(jPanel3, java.awt.BorderLayout.CENTER);

        exceptionE.setToolTipText("");
        jPanel4.add(exceptionE, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unused")
	private void jSplitPaneAncestorAdded(final javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jSplitPaneAncestorAdded
        jSplitPane.setDividerLocation(getSize().width / 2);
    }//GEN-LAST:event_jSplitPaneAncestorAdded

    @SuppressWarnings("unused")
	private void jSplitPaneAncestorResized(final java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPaneAncestorResized
        jSplitPane.setDividerLocation(getSize().width / 2);
    }//GEN-LAST:event_jSplitPaneAncestorResized

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser c = new JFileChooser();

        if (jTextField1.getText().length() > 0) {
            c.setSelectedFile(new File(jTextField1.getText()));
        }
        // Demonstrate "Open" dialog:
        switch (c.showOpenDialog(jTextField1)) {
            case JFileChooser.APPROVE_OPTION:
                jTextField1.setText(c.getSelectedFile().toURI().toString());
                Path bigTextFile = Paths.get(c.getSelectedFile().toURI());

                final LargeTextFactory factory = LargeTextFactory.newBuilder()
                        .setCharset(StandardCharsets.UTF_8) // either a Charset instance
                        .setCharsetByName("windows-1252") // or by name
                        .setWindowSize(16, SizeUnit.MiB) // set the window size
                        .build();

                try  {
                    largeText  = factory.load(bigTextFile);
                    // use "largeText" here
                } catch (IOException ex) {
                    Logger.getLogger(XPath.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;
            case JFileChooser.CANCEL_OPTION:
                exceptionE.setText("Cancelado ");
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox FindBreak;
    private javax.swing.JCheckBox OnlyFind;
    private javax.swing.JCheckBox ReplaceFind;
    private javax.swing.JLabel exceptionE;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane modifed;
    private javax.swing.JTextPane original;
    private javax.swing.JTextPane resultReplace;
    private javax.swing.JScrollPane sModifed;
    private javax.swing.JScrollPane sOriginal;
    // End of variables declaration//GEN-END:variables
private LargeText largeText;

    private void initMineListeners() {
        original.getDocument().addDocumentListener(listener);
        //findReplace.getDocument().addDocumentListener(listener);
        resultReplace.getDocument().addDocumentListener(listener);
        OnlyFind.addChangeListener(listener);
        FindBreak.addChangeListener(listener);
        ReplaceFind.addChangeListener(listener);
    }

    class ListenerChanges implements DocumentListener, ChangeListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            modifi();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            modifi();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            modifi();
        }

        @Override
        public void stateChanged(ChangeEvent e) {
            modifi();

        }

        private void modifi() {
            try {
                convert(original,
                        largeText, resultReplace, modifed
                );
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            sModifed.getVerticalScrollBar().setValue(
                    sModifed.getVerticalScrollBar().getMinimum());
            sModifed.getHorizontalScrollBar().setValue(
                    sModifed.getHorizontalScrollBar().getMinimum());

        }

    }

    ListenerChanges listener = new ListenerChanges();

    ExecThread master = null;
    ExecThread slave = null;

    private void convert(JTextPane text, LargeText largeText, JTextPane replace,
            JTextPane modifed) throws InterruptedException {
        try {
            if (master == null || !master.isAlive()) {
                master = new ExecThread(text, largeText, replace, modifed, OnlyFind, ReplaceFind, FindBreak, exceptionE);
                master.start();
                exceptionE.setText("Processando");
                exceptionE.setForeground(Color.red);
                master.join(5000);
                exceptionE.setForeground(Color.GREEN);

                exceptionE.setText("FOI");
            } else {
                slave = new ExecThread(text, largeText, replace, modifed, OnlyFind, ReplaceFind, FindBreak, exceptionE);
            }

            exceptionE.setText("");
        } catch (Exception e) {
            exceptionE.setText(e.getMessage());
        }

    }

    class ExecThread extends Thread {

        JTextPane text;
        LargeText largeText;
        JTextPane replace;
        JTextPane modifed;
        JCheckBox onlyFind;
        JCheckBox replaceFind;
        JCheckBox findBreak;
        JLabel exceptionE;

        public ExecThread(JTextPane text, LargeText largeText, JTextPane replace, JTextPane modifed, JCheckBox onlyFind,
                JCheckBox replaceFind, JCheckBox findBreak, JLabel exceptionE) {
            super();
            this.text = text;
            this.largeText = largeText;
            this.replace = replace;
            this.modifed = modifed;
            this.onlyFind = onlyFind;
            this.replaceFind = replaceFind;
            this.findBreak = findBreak;
            this.exceptionE = exceptionE;

        }

        @Override
        public void run() {
            StringBuffer result = new StringBuffer();
            String replaceStr = replace.getText().replaceAll("\\\\n", "\n");
            try {
                Pattern p = Pattern.compile(text.getText(), 2);
                Matcher m = p.matcher(largeText);

                if (!onlyFind.isSelected()) {
                    result.append(m.replaceAll(replaceStr));
                } else {

                    while (m.find()) {
                        String resultAux;
                        resultAux = m.group();
                        if (replaceFind.isSelected()) {
                            resultAux = replaceStr;
                            Pattern pR = Pattern.compile("\\$\\{(?<x>[^\\}]*)\\}");
                            Matcher mR = pR.matcher(replaceStr);

                            while (mR.find()) {
                                String key = mR.group("x");
                                resultAux = resultAux.replace("${" + key + "}", m.group(key));
                            }
                        }
                        if (findBreak.isSelected()) {
                            resultAux += '\n';
                        }
                        result.append(resultAux);
                    }

                }
                exceptionE.setText("");
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            modifed.setText(result.toString());
        }
    }
}
